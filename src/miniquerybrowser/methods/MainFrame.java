package miniquerybrowser.methods;

import java.awt.Color;
import java.awt.Cursor;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.UIManager;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author RAFSANJANI
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    BrowserEngine queryBrowser;
    Credentials credentials;
    DefaultComboBoxModel comboModel;
    private static int logCount = 0;
    private String currentSchema;
    //create custom JTable
    JTable resultsTable = new JTable();
    ResultSet rs;
    int displayed = 1, numberOfRows = 0;
    int totalDisplayed = 0;
    int pageLength = 0;
    public MainFrame() {
        initComponents();

        scrollPanel.getViewport().add(resultsTable);
        queryBrowser = new BrowserEngine();
        credentials = new Credentials();

        this.getRootPane().setDefaultButton(btnConnect);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        cmbDatabase = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtQuery = new javax.swing.JTextArea();
        btnExecute = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPass = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        lblCurrentDatabase = new javax.swing.JLabel();
        scrollPanel = new javax.swing.JScrollPane();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        lblResultsInfo = new javax.swing.JLabel();
        btnClearLog = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtLogArea = new javax.swing.JTextPane();
        lblResultsInfo1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtPageLength = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mini Query Browser For MySQL");
        setLocationByPlatform(true);
        setName("FrameMain"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 28)); // NOI18N
        jLabel1.setText("MINI QUERY BROWSER FOR MYSQL");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Database"));

        cmbDatabase.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cmbDatabase.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-NO DB-" }));
        cmbDatabase.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDatabaseItemStateChanged(evt);
            }
        });
        cmbDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDatabaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbDatabase, 0, 137, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(cmbDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        txtQuery.setColumns(20);
        txtQuery.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtQuery.setForeground(new java.awt.Color(204, 255, 255));
        txtQuery.setRows(5);
        txtQuery.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtQuery.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtQuery.setMinimumSize(new java.awt.Dimension(800, 800));
        txtQuery.setNextFocusableComponent(btnExecute);
        jScrollPane1.setViewportView(txtQuery);

        btnExecute.setText("Execute");
        btnExecute.setNextFocusableComponent(txtUser);
        btnExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("User Name");

        txtUser.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtUser.setFocusCycleRoot(true);
        txtUser.setNextFocusableComponent(txtPass);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Current Schema:");

        txtPass.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtPass.setNextFocusableComponent(btnConnect);

        btnConnect.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        btnConnect.setText("Connect");
        btnConnect.setNextFocusableComponent(txtQuery);
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Password");

        lblCurrentDatabase.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        lblCurrentDatabase.setText("NULL");

        btnNext.setText("Next");
        btnNext.setEnabled(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setText("Previous");
        btnPrevious.setEnabled(false);
        btnPrevious.setFocusCycleRoot(true);
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        lblResultsInfo.setText("results");

        btnClearLog.setText("Clear Log");
        btnClearLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearLogActionPerformed(evt);
            }
        });

        txtLogArea.setEditable(false);
        jScrollPane2.setViewportView(txtLogArea);

        lblResultsInfo1.setText("Logs");

        jLabel3.setText("Records Per Page:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblResultsInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPrevious)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNext))
                    .addComponent(scrollPanel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnConnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCurrentDatabase)
                        .addGap(8, 8, 8))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPageLength, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(btnExecute))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblResultsInfo1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClearLog, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(37, 37, 37))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnNext, btnPrevious});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCurrentDatabase))
                    .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExecute)
                    .addComponent(jLabel3)
                    .addComponent(txtPageLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext)
                    .addComponent(btnPrevious)
                    .addComponent(lblResultsInfo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClearLog, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblResultsInfo1)))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteActionPerformed
        // TODO add your handling code here:
        numberOfRows = 0;
        displayed = 0;
        
        try{
             pageLength = Integer.parseInt(txtPageLength.getText());
             if(pageLength <= 0)
                 throw new InvalidOperationException();
        }catch(NumberFormatException ex){
           writeLog("The Page Length must be an integer", LogType.ERROR);
           return;
        } catch (InvalidOperationException ex) {
             writeLog("The Page Length cannot be negative", LogType.ERROR);
             return;
        }
        
        DefaultTableModel model = new DefaultTableModel();

        String sql = txtQuery.getText().trim();
        try {

            QueryType type = parseQuery(sql);
            if (type == QueryType.COMMAND) {
                if (sql.toLowerCase().contains("use")) {

                    queryBrowser.runQuery(sql, QueryType.COMMAND);
                    writeLog("Default Schema changed", LogType.INFO);

                    currentSchema = sql.substring(4, sql.length());
                    for (int a = 0; a < cmbDatabase.getItemCount(); a++) {
                        if (cmbDatabase.getItemAt(a).toString().toLowerCase().equals(currentSchema.toLowerCase())) {
                            cmbDatabase.setSelectedIndex(a);
                        }
                    }
                }
                return;
            } else if (type == QueryType.UPDATE) {
                int affectedRows = (int) queryBrowser.runQuery(sql, QueryType.UPDATE);
                writeLog(affectedRows + " rows affected", LogType.OUTPUT);
                return;
            }

            rs = (ResultSet) queryBrowser.runQuery(sql, QueryType.SELECT);
            //move cursor to the last item in order to get affected rows

            if (rs.last()) {
                numberOfRows = rs.getRow();
                rs.beforeFirst();
            }

            if (numberOfRows > pageLength) {
                btnNext.setEnabled(true);
            }

            model = queryToTableModel(rs);

            lblResultsInfo.setText("Showing results: 1 - " + rs.getRow() + " / " + numberOfRows);

            if (rs.getRow() >= numberOfRows) {
                btnNext.setEnabled(false);
            }

        } catch (Exception ex) {
            writeLog(ex.getMessage(), LogType.ERROR);
        } finally {
            resultsTable.setModel(model);
        }

    }//GEN-LAST:event_btnExecuteActionPerformed

    /**
     *
     * @param sql
     * @return
     * @throws InvalidOperationException
     */
    public QueryType parseQuery(String sql) throws InvalidOperationException {
        //check whether user is trying to type more than one query by separating with a ;
        if (sql.contains(";") && sql.indexOf(";") != sql.length() - 1) {
            throw new InvalidOperationException("Sorry, multiple queries are not supported yet. Try executing them one after the other.");
        }

        QueryType type = QueryType.SELECT;
        if (sql.toLowerCase().startsWith("use")) {
            type = QueryType.COMMAND;
        }
        if (sql.toLowerCase().startsWith("update")) {
            type = QueryType.UPDATE;
        }
        if (sql.toLowerCase().startsWith("select")) {
            type = QueryType.SELECT;
        }

        return type;
    }

    public DefaultTableModel queryToTableModel(ResultSet results) throws Exception {
        ResultSetMetaData metaData = results.getMetaData();
        DefaultTableModel model = new DefaultTableModel();
        int columnCount = metaData.getColumnCount();

        totalDisplayed = rs.getRow();
        for (int a = 1; a <= columnCount; a++) {
            model.addColumn(metaData.getColumnName(a));
        }

        while (results.next() && displayed < pageLength) {
            int x = results.getRow();
            Vector row = new Vector();
            for (int i = 1; i <= columnCount; i++) {
                if (metaData.getColumnTypeName(i).toLowerCase().startsWith("int")) {
                    row.add(results.getInt(i));
                } else {
                    row.add(results.getString(i));
                }
            }
            model.addRow(row);
            displayed++;
        }

        rs.absolute(rs.getRow() - 1); //move the cursor back one row to account for the most recent results.next() in the while statement

        displayed = 0;

        return model;

    }
    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        try {
            // TODO add your handling code here:
            if (!queryBrowser.connected()) {
                connectToDatabase();
            } else {
                disconnectFromDatabase();
            }
        } catch (InvalidOperationException ex) {
            writeLog(ex.getMessage(), LogType.ERROR);
        }
    }//GEN-LAST:event_btnConnectActionPerformed

    private void disconnectFromDatabase() {
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        try {
            queryBrowser.disconnect();
            btnConnect.setText("Connect");
            txtUser.setEditable(true);
            txtPass.setEditable(true);
            cmbDatabase.removeAllItems();
            lblCurrentDatabase.setText("NULL");
        } catch (InvalidOperationException | SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }

    private void connectToDatabase() {
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        String username = txtUser.getText().trim();
        String password = txtPass.getText().trim();

        credentials.setUsername(username);
        credentials.setPassword(password);
        credentials.setUrl("localhost"); //assuming that url will always be localhost for now

        queryBrowser.setCredentials(credentials);

        try {
            queryBrowser.connect();
            if (queryBrowser.connected()) {
                txtUser.setEditable(false);
                txtPass.setEditable(false);
                btnConnect.setText("Disconnect");
                ResultSet rs = (ResultSet) queryBrowser.runQuery("SHOW DATABASES", QueryType.SELECT);
                cmbDatabase.removeAllItems();
                while (rs.next()) {
                    cmbDatabase.addItem(rs.getString(1));
                }
                //cmbDatabase.setModel(comboModel);
            }
        } catch (Exception ex) {
            writeLog(ex.getMessage(), LogType.ERROR);
        } finally {
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        try {
            btnPrevious.setEnabled(true);
            DefaultTableModel model = queryToTableModel(rs);
            lblResultsInfo.setText("Showing results: " + (totalDisplayed + 1) + " - " + (rs.getRow()) + " / " + numberOfRows);

            resultsTable.setModel(model);

            if (rs.getRow() >= numberOfRows) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }

        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        try {
            btnNext.setEnabled(true);
            int newIndex = rs.getRow() - (pageLength * 2);
            if (newIndex >= 0) {
               rs.absolute(newIndex);
           } else {
                rs.beforeFirst();
            }

            DefaultTableModel model = queryToTableModel(rs);
            lblResultsInfo.setText("Showing results: " + (totalDisplayed + 1) + " - " + (rs.getRow()) + " / " + numberOfRows);

            resultsTable.setModel(model);
            if (newIndex <= 0) {
                btnPrevious.setEnabled(false);
            }

        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnPreviousActionPerformed

    private void cmbDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDatabaseActionPerformed
        // TODO add your handling code here:
        if (cmbDatabase.getItemCount() != 0) {
            currentSchema = cmbDatabase.getSelectedItem().toString();
            lblCurrentDatabase.setText(currentSchema);
            lblCurrentDatabase.setForeground(Color.blue);

            try {
                queryBrowser.runQuery("USE " + currentSchema, QueryType.COMMAND);
            } catch (InvalidOperationException | WrongQueryException ex) {
                writeLog(ex.getMessage(), LogType.ERROR);
            }
        }
    }//GEN-LAST:event_cmbDatabaseActionPerformed

    private void cmbDatabaseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDatabaseItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbDatabaseItemStateChanged

    private void btnClearLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearLogActionPerformed
        // TODO add your handling code here:
        clearLog();
    }//GEN-LAST:event_btnClearLogActionPerformed
    private void clearLog() {
        logCount = 0;
        txtLogArea.setText(null);
    }

    private void writeLog(String logMessage, LogType type) {
        switch (type) {
            case INFO:
                appendToPane(txtLogArea, ++logCount + ". " + logMessage, Color.GREEN);
                break;
            case ERROR:
                appendToPane(txtLogArea, ++logCount + ". " + logMessage, Color.PINK);
                break;
            case WARNING:
                break;
            case OUTPUT:
                appendToPane(txtLogArea, ++logCount + ". " + logMessage, Color.MAGENTA);
                break;
            default:
                break;
        }
    }
    /*
     Append a coloured text to the end of a JTextPane 
     original source: http://stackoverflow.com/questions/9650992/how-to-change-text-color-in-the-jtextarea
     */

    private void appendToPane(JTextPane tp, String msg, Color c) {
        tp.setEditable(true);
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        //int len = tp.getDocument().getLength();
        tp.setCaretPosition(0);
        tp.setCharacterAttributes(aset, false);
        if (tp.getText().length() <= 0) {
            tp.replaceSelection(msg);
        } else {
            tp.replaceSelection(msg + "\n");
        }
        tp.setEditable(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                System.out.println(info.getClassName());
//                if ("Windows".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    //System.out.println(info.getClassName());
//                    break;
//                }
//            }
            //de.javasoft.plaf.synthetica.SyntheticaBlackEyeLookAndFeel
            UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLookAndFeel");

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearLog;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnExecute;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JComboBox cmbDatabase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCurrentDatabase;
    private javax.swing.JLabel lblResultsInfo;
    private javax.swing.JLabel lblResultsInfo1;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTextPane txtLogArea;
    private javax.swing.JTextField txtPageLength;
    private javax.swing.JTextField txtPass;
    private javax.swing.JTextArea txtQuery;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}

enum LogType {

    ERROR, WARNING, INFO, OUTPUT;
}
